{  
  "Author": "tomcat and jerry",  
  "url":"http://www.cnblogs.com/tomcatandjerry/p/5899722.html"      
} 


String url = "http://localhost:8080/json";  
JSONObject json = restTemplate.getForEntity(url, JSONObject.class).getBody();  

restConfig.java

复制代码
package com.iwhere.scrapy.rest;

import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.List;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.client.RestOperations;
import org.springframework.web.client.RestTemplate;

/**
 * 定义restTemplate的配置
 * 
 * @author wenbronk
 * @Date 下午4:33:35
 */
@Configuration
public class RestTemplateConfig {

    @Bean
    @ConditionalOnMissingBean({ RestOperations.class, RestTemplate.class })
    public RestTemplate restTemplate(ClientHttpRequestFactory factory) {
        // return new RestTemplate(factory);

        RestTemplate restTemplate = new RestTemplate(factory);

        // 使用 utf-8 编码集的 conver 替换默认的 conver（默认的 string conver 的编码集为"ISO-8859-1"）
        List<HttpMessageConverter<?>> messageConverters = restTemplate.getMessageConverters();
        Iterator<HttpMessageConverter<?>> iterator = messageConverters.iterator();
        while (iterator.hasNext()) {
            HttpMessageConverter<?> converter = iterator.next();
            if (converter instanceof StringHttpMessageConverter) {
                iterator.remove();
            }
        }
        messageConverters.add(new StringHttpMessageConverter(Charset.forName("UTF-8")));

        return restTemplate;
    }

    @Bean
    @ConditionalOnMissingBean({ClientHttpRequestFactory.class})
    public ClientHttpRequestFactory simpleClientHttpRequestFactory() {
        SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();
        factory.setReadTimeout(15000);// ms
        factory.setConnectTimeout(15000);// ms
        return factory;
    }
}
复制代码
 

 

请求测试: 

复制代码
SpringRestTemplateApp.java  
@RestController  
@EnableAutoConfiguration  
@Import(value = {Conf.class})  
public class SpringRestTemplateApp {  
      
    @Autowired  
    RestTemplate restTemplate;  
      
    /***********HTTP GET method*************/  
    @RequestMapping("")  
    public String hello(){  
        String url = "http://localhost:8080/json";  
        JSONObject json = restTemplate.getForEntity(url, JSONObject.class).getBody();  
        return json.toJSONString();  
    }  
      
    @RequestMapping("/json")  
    public Object genJson(){  
        JSONObject json = new JSONObject();  
        json.put("descp", "this is spring rest template sample");  
        return json;  
    }  
      
    /**********HTTP POST method**************/  
    @RequestMapping("/postApi")  
    public Object iAmPostApi(@RequestBody JSONObject parm){  
        System.out.println(parm.toJSONString());  
        parm.put("result", "hello post");  
        return parm;  
    }  
      
    @RequestMapping("/post")  
    public Object testPost(){  
        String url = "http://localhost:8080/postApi";  
        JSONObject postData = new JSONObject();  
        postData.put("descp", "request for post");  
        JSONObject json = restTemplate.postForEntity(url, postData, JSONObject.class).getBody();  
        return json.toJSONString();  
    }  
      
    public static void main(String[] args) throws Exception {  
        SpringApplication.run(SpringRestTemplateApp.class, args);  
    }  
      
}  
复制代码
也可以异步调用

复制代码
@RequestMapping("/async")  
    public String asyncReq(){  
        String url = "http://localhost:8080/jsonAsync";  
        ListenableFuture<ResponseEntity<JSONObject>> future = asyncRestTemplate.getForEntity(url, JSONObject.class);  
        future.addCallback(new SuccessCallback<ResponseEntity<JSONObject>>() {  
            public void onSuccess(ResponseEntity<JSONObject> result) {  
                System.out.println(result.getBody().toJSONString());  
            }  
        }, new FailureCallback() {  
            public void onFailure(Throwable ex) {  
                System.out.println("onFailure:"+ex);  
            }  
        });  
        return "this is async sample";  
复制代码
自定义header

复制代码
@RequestMapping("/headerApi")//模拟远程的restful API  
    public JSONObject withHeader(@RequestBody JSONObject parm, HttpServletRequest req){  
        System.out.println("headerApi====="+parm.toJSONString());  
        Enumeration<String> headers = req.getHeaderNames();  
        JSONObject result = new JSONObject();  
        while(headers.hasMoreElements()){  
            String name = headers.nextElement();  
            System.out.println("["+name+"]="+req.getHeader(name));  
            result.put(name, req.getHeader(name));  
        }  
        result.put("descp", "this is from header");  
        return result;  
    }  
  
    @RequestMapping("/header")  
    public Object postWithHeader(){  
　　　　//该方法通过restTemplate请求远程restfulAPI  
        HttpHeaders headers = new HttpHeaders();  
        headers.set("auth_token", "asdfgh");  
        headers.set("Other-Header", "othervalue");  
        headers.setContentType(MediaType.APPLICATION_JSON);  
          
        JSONObject parm = new JSONObject();  
        parm.put("parm", "1234");  
        HttpEntity<JSONObject> entity = new HttpEntity<JSONObject>(parm, headers);  
        HttpEntity<String> response = restTemplate.exchange(  
                "http://localhost:8080/headerApi", HttpMethod.POST, entity, String.class);//这里放JSONObject, String 都可以。因为JSONObject返回的时候其实也就是string  
        return response.getBody();  
    }  




最近使用RestTemplate发送post请求，遇到了很多问题，如转换httpMessage失败、中文乱码等，调了好久才找到下面较为简便的方法：

复制代码
 1         RestTemplate restTemplate = new RestTemplate();
 2         HttpHeaders headers = new HttpHeaders();
 3         MediaType type = MediaType.parseMediaType("application/json; charset=UTF-8");
 4         headers.setContentType(type);
 5         headers.add("Accept", MediaType.APPLICATION_JSON.toString());
 6         
 7         JSONObject jsonObj = JSONObject.fromObject(params);
 8         
 9         HttpEntity<String> formEntity = new HttpEntity<String>(jsonObj.toString(), headers);
10 
11         String result = restTemplate.postForObject(url, formEntity, String.class);

如果直接使用在postForObject中把对象传入很容易出现no suitable HttpMessageConverter found for request type的错误，建议直接先转成字符串，见jsonObj.otString()，网上有人说设置RestTemplate的HttpMessageConverter，试了一下要引入各种包。另外要注意中文编码问题，网上有人说StringHttpMessageConverter默认使用ISO-8859-1，要指定为UTF-8编码，自己尝试没有成功，最后通过指定contentType的方式解决了。




HttpHeaders headers = new HttpHeaders();

headers.setContentType(MediaType.APPLICATION_JSON);
String url = "http://localhost:8080/test/testadd/{id}";
Map<String, String> aa = new HashMap<String, String>();
aa.put("id", "123");
Student student = new Student();
student.setAa("大智慧aa");
student.setBb("bb");
student.setCc("cc");
RestTemplate restTemplate = new RestTemplate();
HttpEntity<Student> entity = new HttpEntity<Student>(student, headers);
// ResponseEntity<Student> responseEntity = restTemplate.exchange(url, HttpMethod.POST, entity, Student.class, aa);
ResponseEntity<Student> responseEntity = restTemplate.postForEntity(url, entity, Student.class, aa);
Student studentResult = responseEntity.getBody();
System.out.println(studentResult.getAa());
System.out.println(studentResult.getBb());
System.out.println(studentResult.getCc());